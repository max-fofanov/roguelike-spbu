static void Main4(string[] args)
        {
            MakeConsoleReady();

            Random rnd = new Random();
            var chars = "$%!*abcdefghijklmnopqrstuvwxyz1234567890?;:ABCDEFGHIJKLMNOPQRSTUVWXYZ^&";

            Player player = new Player(0, 0);
            int entityCount = 5;
            List<Entity> entities = new List<Entity>();
            new Renderer(40, 150, 20, 20);
            //Renderer.SetGui("./GUI gold.txt", 1, 1);
            Map board = Generation.GenerateDungeon(45, 180);

            bool finished = false;
            for (int i = 0; i < 45 && !finished; i++)
            {
                for (int j = 0; j < 180 && !finished; j++)
                {
                    if (!board.Tiles[i][j].Impassable && board.Tiles[i][j].GetType() != typeof(Void) && board.Tiles[i][j] is Exit && (board.Tiles[i][j] as Exit).Room == -1)
                    {
                        player = new Player(i, j);
                        finished = true;
                    }
                }
            }

            for (int i = 0; i < entityCount; i++)
            {
                Entity tmp = new Devil(rnd.Next(45), rnd.Next(180));

                while (board.Tiles[tmp.X][tmp.Y].Impassable || board.Tiles[tmp.X][tmp.Y].GetType() == typeof(Void)) //TODO
                {
                    tmp.X = rnd.Next(45);
                    tmp.Y = rnd.Next(180);
                }

                // tmp.VStatus = VisualStatus.wasSeen;
                // tmp.Symbol = chars[rnd.Next(chars.Length)].ToString();
                // tmp.PrimaryForegroundColor = System.Drawing.Color.White;
                entities.Add(tmp);
            }

            // List<(int, int)> path = Enemy.AStarSearch(board, entities, player, (entities[0].X, entities[0].Y), (player.X, player.Y));
            //Console.WriteLine(path.Count);
            //Console.WriteLine("S {0} {1} G {2} {3}", entities[0].X, entities[0].Y, player.X, player.Y);
            /*foreach ((int x, int y) in path)
            {
                board.Tiles[x][y] = new Rock(x, y);
            }*/



            //Map board = Generation.GenerateCave(45, 180, (0, 0), (22, 179));
            //Map board = new Map(100, 180);

            //List<List<(int, int)>> Rays = FOV.GetRaysInEllipse((int)(16 * 1.5), (int)(9 * 1.5));\

            Engine engine = new Engine();
            Console.SetCursorPosition(0, 0);
            engine.Turn(true);
            string[,] screenMatrix = Renderer.Render(board, entities, player, engine.allVisible);
            for (int i = 0; i < screenMatrix.GetLength(0); i++)
            {
                for (int j = 0; j < screenMatrix.GetLength(1); j++)
                    Console.Write(screenMatrix[i, j]);
                Console.WriteLine();
            }
            

            //Walkman.Play("./sounds/Hub/Good-theme.-The-Versions-Final-Fantasy-7-Main-Theme-_From-Final-Fantasy-7-_.wav");
         
            while (true)
            {
                Console.SetCursorPosition(0, 0);
                (Map, List<Entity>) t = engine.Turn();
                screenMatrix = Renderer.Render(t.Item1, t.Item2, player, engine.allVisible);
                for (int i = 0; i < screenMatrix.GetLength(0); i++)
                {
                    for (int j = 0; j < screenMatrix.GetLength(1); j++)
                        Console.Write(screenMatrix[i, j]);
                    Console.WriteLine();
                }
            }
        }

        int rand1 = random.Next(rooms.Count / 2);
            int rand2 = random.Next(rooms.Count / 2, rooms.Count);

            Room entrance = rooms[rand1];
            Room exit = rooms[rand2];

            int coord = random.Next(entrance.Y0 + 1, entrance.Y1 - 1);

            for (int i = 0; i <= entrance.X0; i++) {
                

                Tile tmp = new Field(i, coord);
                dungeon.Tiles[i][coord] = tmp;
                                
                Tile tmp1 = new Border(i, coord - 1);
                dungeon.Tiles[i][coord - 1] = tmp1;

                Tile tmp2 = new Border(i, coord + 1);
                dungeon.Tiles[i][coord + 1] = tmp2;

            }

            coord = random.Next(exit.Y0 + 1, exit.Y1 - 1);

            for (int i = exit.X1 - 1; i < x; i++) {
                

                Tile tmp = new Field(i, coord);
                dungeon.Tiles[i][coord] = tmp;
                                
                Tile tmp1 = new Border(i, coord - 1);
                dungeon.Tiles[i][coord - 1] = tmp1;

                Tile tmp2 = new Border(i, coord + 1);
                dungeon.Tiles[i][coord + 1] = tmp2;

            if (room1.Y0 > room2.Y0) 
            { 
                
                return 1;
            }


public void ShowAttack()
{
    List<string> EnemiesList = new List<string>();
    foreach (Entity entity in SystemInfo.engine.GetEntitiesInRange())
    {
        EnemiesList.Add(entity.Name ?? "NoName");
    }
    UpdateListBox(4, "Attack", EnemiesList);
    ShowAttackDescription((windows[4] as ListBox).currentLine);
}
public void ShowAttackDescription(int num)
{
    UpdateTextBox(6, "Attack");
    List<Entity> EnemiesList = SystemInfo.engine.GetEntitiesInRange();
    if (num > 0 && num < EnemiesList.Count())
    {
        Entity enemy = EnemiesList[num];

        string description = "";
        description += enemy.Name ?? "Noname";
        description += "\n\n";
        description += String.Format("HP: {0}\n", enemy.HealthPoints);
        description += String.Format("Attack: {0}\n", enemy.Damage);
        description += String.Format("ROW: {0}\n", enemy.RangeOfView);
        description += String.Format("ROA: {0}\n", enemy.RangeOfHit);
        description += "\n";
        description += enemy.Description;

        UpdateTextBox(5, null, description);
    }
}
public void ClearDescription()
{
    UpdateTextBox(5, null, "");
}
public void ClearRigthPanels(){
    UpdateListBox(4, "", new List<string>());
    ClearDescription();
}